name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # Configurações do servidor
      - name: Server - Install dependencies
        run: |
          cd server
          npm ci

      - name: Server - Lint check
        run: |
          cd server
          npm run lint || echo "Lint not configured, skipping"

      - name: Server - Test
        run: |
          cd server
          npm test || echo "Tests not configured, skipping"

      # Configurações do cliente
      - name: Client - Install dependencies
        run: |
          cd client
          npm ci

      - name: Client - Lint check
        run: |
          cd client
          npm run lint || echo "Lint not configured, skipping"

      - name: Client - Test
        run: |
          cd client
          npm test -- --watchAll=false || echo "Tests not configured, skipping"

      - name: Client - Build
        run: |
          cd client
          npm run build

  docker-build-push:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      # Configuração do Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Construir e enviar a imagem do servidor
      - name: Build and push server image
        uses: docker/build-push-action@v3
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/login-app-server:latest

      # Construir e enviar a imagem do cliente
      - name: Build and push client image
        uses: docker/build-push-action@v3
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/login-app-client:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      # Exemplo de deploy (isso dependeria do seu servidor)
      # Este é um exemplo básico, você precisaria adaptá-lo para seu ambiente específico
      - name: Deploy to production
        run: |
          echo "Deployment would happen here"
          # Exemplo de comando SSH para servidor remoto:
          # ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /path/to/app && docker-compose pull && docker-compose up -d"

      - name: Notify deployment
        run: |
          echo "Deployment completed successfully!"

# Secrets necessários:
# - DOCKERHUB_USERNAME: Seu nome de usuário no Docker Hub
# - DOCKERHUB_TOKEN: Token de acesso ao Docker Hub
# - SSH_USER: Nome de usuário para SSH (para deploy)
# - SSH_HOST: Host do servidor (para deploy)
# - SSH_PRIVATE_KEY: Chave privada SSH (para deploy)
