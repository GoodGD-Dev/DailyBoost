const cron = require('node-cron');
const { runCleanup, runDeepCleanup } = require('./cleanup.job');

/**
 * Configura√ß√£o dos jobs de limpeza autom√°tica
 */
class AuthScheduler {
  static jobs = {};
  static isInitialized = false;

  /**
   * Inicializa todos os jobs programados
   */
  static init() {
    if (this.isInitialized) {
      console.log('‚ö†Ô∏è Auth scheduler j√° foi inicializado');
      return;
    }

    console.log('üìÖ Inicializando Auth scheduler...');

    try {
      // Job principal: Limpeza di√°ria √†s 2h da manh√£
      this.jobs.dailyCleanup = cron.schedule('0 2 * * *', async () => {
        const timestamp = new Date().toISOString();
        console.log(`üïê [${timestamp}] Executando limpeza di√°ria autom√°tica...`);

        try {
          await runCleanup();
          console.log(`‚úÖ [${timestamp}] Limpeza di√°ria conclu√≠da com sucesso`);
        } catch (error) {
          console.error(`‚ùå [${timestamp}] Erro na limpeza di√°ria:`, error);
        }
      }, {
        scheduled: true,
        timezone: "America/Sao_Paulo"
      });

      // Job semanal: Limpeza profunda (domingo √†s 3h)
      this.jobs.weeklyCleanup = cron.schedule('0 3 * * 0', async () => {
        const timestamp = new Date().toISOString();
        console.log(`üïê [${timestamp}] Executando limpeza semanal...`);

        try {
          await runDeepCleanup();
          console.log(`‚úÖ [${timestamp}] Limpeza semanal conclu√≠da com sucesso`);
        } catch (error) {
          console.error(`‚ùå [${timestamp}] Erro na limpeza semanal:`, error);
        }
      }, {
        scheduled: true,
        timezone: "America/Sao_Paulo"
      });

      this.isInitialized = true;

      console.log('‚úÖ Auth scheduler configurado com sucesso!');
      console.log('üìã Jobs ativos:');
      console.log('  ‚Ä¢ Limpeza di√°ria: Todo dia √†s 2h');
      console.log('  ‚Ä¢ Limpeza semanal: Domingo √†s 3h');

    } catch (error) {
      console.error('‚ùå Erro ao inicializar Auth scheduler:', error);
      throw error;
    }
  }

  /**
   * Para todos os jobs
   */
  static stop() {
    console.log('üõë Parando Auth scheduler...');

    Object.keys(this.jobs).forEach(jobName => {
      if (this.jobs[jobName]) {
        this.jobs[jobName].stop();
        console.log(`  ‚Ä¢ ${jobName} parado`);
      }
    });

    this.jobs = {};
    this.isInitialized = false;
    console.log('‚úÖ Auth scheduler parado');
  }

  /**
   * Reinicia todos os jobs
   */
  static restart() {
    console.log('üîÑ Reiniciando Auth scheduler...');
    this.stop();
    this.init();
  }

  /**
   * Executa limpeza manual
   */
  static async runManualCleanup() {
    console.log('üîß Executando limpeza manual do Auth...');

    try {
      const result = await runCleanup();
      console.log('‚úÖ Limpeza manual do Auth conclu√≠da');
      return result;
    } catch (error) {
      console.error('‚ùå Erro na limpeza manual do Auth:', error);
      throw error;
    }
  }

  /**
   * Retorna status dos jobs
   */
  static getStatus() {
    const activeJobs = Object.keys(this.jobs).filter(jobName =>
      this.jobs[jobName] && this.jobs[jobName].running !== false
    );

    return {
      isInitialized: this.isInitialized,
      totalJobs: Object.keys(this.jobs).length,
      activeJobs: activeJobs.length,
      jobs: activeJobs,
      lastCheck: new Date().toISOString()
    };
  }

  /**
   * Verifica se um job espec√≠fico est√° rodando
   */
  static isJobRunning(jobName) {
    return this.jobs[jobName] && this.jobs[jobName].running !== false;
  }
}

module.exports = AuthScheduler;